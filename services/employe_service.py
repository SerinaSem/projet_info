import sqlite3
from models.employe import Employe

DB_PATH = "planning_resto.db"

# üîπ Ajouter un employ√©
def ajouter_employe(employe: Employe):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO employe (nom, prenom, email, contrat_heures, id_restaurant)
        VALUES (?, ?, ?, ?, ?)
    """, (employe.nom, employe.prenom, employe.email, employe.contrat_heures, employe.id_restaurant))
    conn.commit()
    conn.close()
    print(f"‚úÖ Employ√© {employe.nom} ajout√© avec succ√®s.")

# üîπ R√©cup√©rer tous les employ√©s
def recuperer_tous_employes():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM employe")
    rows = cursor.fetchall()
    conn.close()
    return [Employe(*row) for row in rows]

# üîπ R√©cup√©rer un employ√© par ID
def recuperer_employe_par_id(id_employe):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM employe WHERE id = ?", (id_employe,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return Employe(*row)
    else:
        print("‚ùå Aucun employ√© trouv√© avec cet ID.")
        return None

# üîπ Modifier un employ√©
def modifier_employe(employe: Employe):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE employe
        SET nom = ?, prenom = ?, email = ?, contrat_heures = ?, id_restaurant = ?
        WHERE id = ?
    """, (employe.nom, employe.prenom, employe.email, employe.contrat_heures, employe.id_restaurant, employe.id))
    conn.commit()
    conn.close()
    print(f"‚úèÔ∏è Employ√© {employe.id} modifi√© avec succ√®s.")

# üîπ Supprimer un employ√©
def supprimer_employe(id_employe):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM employe WHERE id = ?", (id_employe,))
    conn.commit()
    conn.close()
    print(f"üóëÔ∏è Employ√© {id_employe} supprim√© avec succ√®s.")
